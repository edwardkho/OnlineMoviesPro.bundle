HTTP_HEADERS = {
	'Host': '*.videomega.tv',
	'Referer': 'http://onlinemovies.pro',
	'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25'
}


########################################################################################
def NormalizeURL(url):

	return url.split('&')[0]




########################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)

	title = page.xpath("//meta[@name='description']/@content")
	description = page.xpath("//meta[@name='description']/@content")[0]
	thumb = page.xpath("//meta[@property='image']/text")
	ratingvalue = url

	req = HTML.ElementFromURL(url)
	title = req.xpath('//title/text()')[0]
	title = title.replace('VideoMega.tv - ','',1).replace(' | www.onlinemovies.pro','',1)

	req = HTTP.Request(url)
	page_content = req.content
	script_escaped = Regex('.*{\s+document\.write\(unescape\(\"*(.*)\".*', Regex.IGNORECASE|Regex.MULTILINE).search(page_content).groups()[0]
	javascript = String.Unquote(script_escaped)
	thumb = Regex('image: *"([^"]+)"').search(javascript).groups()[0]
	
	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb
	)

########################################################################################
def MediaObjectsForURL(url):

	req = HTTP.Request(url)
	page_content = req.content
	script_escaped = Regex('.*{\s+document\.write\(unescape\(\"*(.*)\".*', Regex.IGNORECASE|Regex.MULTILINE).search(page_content).groups()[0]

	javascript = String.Unquote(script_escaped)
	video_url = Regex('file: *"([^"]+)"').search(javascript).groups()[0]

	return [
        	MediaObject(
			parts = [
				PartObject(
					key = 
						Callback(
							PlayVideo,
							url = video_url,
							post_url = url,
							res = resolution
						)
					)
				],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = resolution,
			audio_channels = 2,
			bitrate = bitrate,
			optimized_for_streaming = True if Client.Product != 'Plex Web' else False
			) for resolution, bitrate in [('1080', 3000), ('720', 1500), ('360', 750)]
	]


########################################################################################
@indirect
def PlayVideo(url, res):

	return IndirectResponse(VideoClipObject, key = url)
